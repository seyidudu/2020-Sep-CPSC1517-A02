using System;
using System.Collections.Generic;

#region Additional Namespaces
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
#endregion

using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NorthwindSystem.Entities
{
    // annotations arre used yo assist EntityFramework in the mapping
    //      of your class to the sql table

    // annotations for properties are placed before the property
    [Table("Products")]
    public class Product
    {   //private data member
        private string _QuantityPerUnit;
        // if you use the same as the sql attribute
        //      for your property nmae, order of properties
        //      does not matter
        //if you names ar different then order is required

        //[Key] single attribute primary, identity key
        //[Key, Column(Order=n)] compound pkey, required in front
        //      of each property, n represents the physical
        //      order as found on the sql  table
        //[Key, DatabaseGenerated(DatabaseGeneratedOption.xxx)]
        //  .xxx -> Identty: pkey on sql is an Identity key (default)
        //          None: pkey is NOT identity, user entered
        //          Computer: the attribute is a sql computed attribute
        //          which mean that NO actual data is stored 
        //          in the sql table, it is generated by the 
        //          expression in the sql table

        // Example: sql table has an attributes called TOTAL which is calculated by two other attributes on the table called quantity and price

        //[DatabaseGenerated(DatabaseGeneratedOption.Compute)]
        // public decimal Total {get; set;}

        //[DatabaseGenerated(DatabaseGeneratedOption.xxx)]
        //          Computer: the attribute is a sql computed attribute
        //              which mean that NO actual data is stored 
        //              in the sql table, it is generated by the 
        //              expression in the sql table

        //[Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Key]
        public int ProductID { get; set; }

        //validation annotations

        [Required(ErrorMessage = "Product name is required")]
        [StringLength(40, ErrorMessage = "Product name is limited to 40 characters")]
        public string ProductName { get; set; }

        // this foreign key is nulolable on the swl table (don't for the?)
        // you may be tempted to use the [ForeignKey] annotarion
        // BUT DON'T
        // the {ForeignKey] annotations is ONLY required if the
        //      sql table does not use the same name foe it's
        //      foreign key it's parents primary Key
        //OR
        //If you property name does not match the sql attribute name
        public int? SupplierID { get; set; }

        public int? CategoryID { get; set; }

        // nullable string
        // you can still fully impplement a nullable string property

        [StringLength(20, ErrorMessage = "Quantity per unit is Limited to 20 characters")]
        public string QuantityPerUnit
        {
            get { return _QuantityPerUnit; }

            set { _QuantityPerUnit = string.IsNullOrEmpty(value) ? null : value; }
        }
        //money requires the use of decimal, if it complains use double
        //unitPrice is nullable
        //nullable nemerics DO NOT need to be fully implemented
        
        [Range(0.00, double.MaxValue, ErrorMessage ="Unit price should be 0.00 or more.")]
        public decimal? UnitPrice {get; set;}
        
        [Range(0, 32767, ErrorMessage ="Units in stock should be 0 or more")]
        public Int16 UnitsInStock { get; set; }
        [Range(0, 32767, ErrorMessage = "Units on order should be 0 or more")]
        public Int16 UnitsOnOrder { get; set; }
        [Range(0, 32767, ErrorMessage = "Reorder level is 0 or more")]
        public Int16 ReorderLevel { get; set; }
        
        public bool Discontinued { get; set; }

        //Read-Only property that are setup in your class to make
        //      programming easier
        //

        [NotMapped]
        public string NameAndID
        {
            get { return ProductName + "(" + ProductID + ")"; }
        }
    }
}